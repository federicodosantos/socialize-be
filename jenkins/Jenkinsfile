pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_FILE = "docker-compose.yaml"
        DOCKER_IMAGE = "backend-socialize"
        TARGET_URL = "http://localhost:8060"
        SONARQUBE_INSTALLATION = "sonarqube"  
        SONAR_PROJECT_KEY = "socialize-be-vulnerable" 
        SONAR_PROJECT_NAME = "socialize be vulnerable"
        SONAR_HOST_URL = "http://sonarqube.cupcakez.my.id:9000/" 
    }

    stages {
        stage ('Preparation') {
            steps {
                sh 'docker --version'
                sh 'docker compose version'
                sh '${scannerHome}/bin/sonar-scanner --version'
            }
        }
        
        stage('Clone Repository') {
            steps {
                script {
                    echo 'Cloning Repository...'
                }
                git branch: 'vulnerable', url: 'https://github.com/federicodosantos/socialize-be.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Starting SonarQube analysis...'
                withSonarQubeEnv(SONARQUBE_INSTALLATION) {
                    script {
                        sh """
                        ./mvnw clean org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.projectName="${SONAR_PROJECT_NAME}" \
                            -Dsonar.host.url=${SONAR_HOST_URL}
                        """
                    }
                }
            }
        }

        stage('Running Containers') {
            steps {
                echo 'Building Docker image...'
                sh 'docker compose -f $DOCKER_COMPOSE_FILE up --detach --build'
                sh 'docker compose ps'
            }
        }

        stage('Health Check') {
            steps {
                echo 'Checking service health...'
                retry(3) {
                    sh 'curl -f $TARGET_URL || exit 1'
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker resources...'
            sh 'docker compose -f $DOCKER_COMPOSE_FILE down || true'
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
