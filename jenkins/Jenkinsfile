pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_FILE = "docker-compose.yml"
        DOCKER_IMAGE = "backend-socialize"
        ZAP_BASE_URL = "http://zap:8080"
        ZAP_API_KEY = "your-zap-api-key"
        TARGET_URL = "http://localhost:8060"
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Checking out code from SCM...'
                checkout scm
            }
        }

        stage('Build Docker Images') {
            steps {
                echo 'Building Docker image...'
                sh 'docker-compose -f $DOCKER_COMPOSE_FILE build'
            }
        }

        stage('Run Containers') {
            steps {
                echo 'Starting containers...'
                sh 'docker-compose -f $DOCKER_COMPOSE_FILE up -d'
            }
        }

        stage('Health Check') {
            steps {
                echo 'Checking service health...'
                retry(3) {
                    sh 'curl -f $TARGET_URL || exit 1'
                }
            }
        }

        stage('OWASP ZAP Security Scan') {
            steps {
                echo 'Running OWASP ZAP security scan...'
                script {
                    // Start ZAP as a Docker container
                    sh 'docker run -d --name zap -p 8080:8080 owasp/zap2docker-stable zap.sh -daemon -port 8080'
                    
                    // Perform a security scan using ZAP's API
                    sh """
                        curl -X POST $ZAP_BASE_URL/JSON/ascan/action/scan/?url=$TARGET_URL&apikey=$ZAP_API_KEY
                    """
                    
                    // Wait for scan completion
                    sleep(60)
                    
                    // Generate a report
                    sh """
                        curl -X GET $ZAP_BASE_URL/OTHER/core/other/htmlreport/?apikey=$ZAP_API_KEY -o zap_report.html
                    """
                }
            }
        }

        stage('Archive ZAP Report') {
            steps {
                echo 'Archiving ZAP report...'
                archiveArtifacts artifacts: 'zap_report.html', allowEmptyArchive: false
            }
        }

        stage('Deploy to Environment') {
            steps {
                echo 'Deploying services...'
                sh 'docker-compose -f $DOCKER_COMPOSE_FILE up -d'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker resources...'
            sh 'docker-compose -f $DOCKER_COMPOSE_FILE down || true'
            sh 'docker rm -f zap || true'
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
